Liam Brown:
https://cliambrown.com/battleship/methodology.php
https://cliambrown.com/battleship/

Alemi/Physics Virtuosi:
https://web.archive.org/web/20190102121915/http://thephysicsvirtuosi.com/posts/the-linear-theory-of-battleship.html



Bitmask approach:
Keep track of individual usable positions for each ship (index them, only use valid ones)
Solve pairwise conflicts

Recurse on bitmask
In the bottom level of recursion,
increment the counter values associated with each position for each ship
(or do this with valid-count return values and multiplication)

keep track of hits count along the way

At the end, use the draw function to draw that count onto the final grid



Adding hits and sinks to bitmask approach:
	For each ship state, have a count of hits_overlapped[i][s_i].
	At the end, if the sum of all hits_overlapped are less than the total
	hit count, do not use it
In the case of "sunk" messages that tell you which boat was sunk:
	For sinks, find exactly the valid ship states for the sunk boat,
	such that the ship state overlaps with the sunk spot, and all other points are hits
In the case of ambiguous ones ("a ship was sunk", no info on which)
	For each ship state, have a sunk[i][s_i] \in\{0,1\},
	1 if all hits and one sunk, 0 else
	Sum them together and filter out configurations that have the incorrect number
Note that for cases with sunk boats,
	a state overlapping with all hits and no sunk messages
	are invalid states


Possible online approach:
When a miss is added,
do the branching algorithm again,
but find only the newly invalid configurations (look at "interesting" branches),
and subtract them.
When a hit or sink is added, do the same.


Online misses, hits, and sinks:
Start from __builtin version ('custom' bitset), unrolled version ok
	(start from hits and sinks version)
Use interactive command-line interface for now
No need to record the state counts, the grid of counts suffices
Add permutation parameter to place_ship routine (to optimize branching)
valid_states should only be the default for current_states,
	rather than the indeces (let the indeces be all states)
To add a miss:
	We want to find all configurations that previously intersected the miss
	Find all states that intersect the miss, remove them from valid_states,
		but add them to miss_states
	For each ship b,
		set current_states[b] to be miss_states[b],
		and current_states[c]=valid_states[c] (c !=b)
		Create a permutation starting with b (and then the rest in descending order)
		Call place_ship
		Subtract the results from the grid
To add a hit:
	We want to find all configurations that intersect the hit
	Find all states that intersect the hit, add them to hit_states,
		and also remove states covered entirely in hits from valid_states
	Reset the counts grid
	For each ship b,
		set current_states[b] to be hit_states[b],
		and current_states[c]=valid_states[c] (c !=b)
		Create a permutation starting with b (and then the rest in descending order)
		Call place_ship
		Add the results to the grid
To add a sink:
	We want to find all configurations that intersect the sink correctly
	Find all states that intersect the sink,
		add them to sink_states_valid and sink_states_invalid appropriately,
		remove sink_states_invalid from valid_states
	Reset the counts grid
	For each ship b,
		set current_states[b] to be sink_states_valid[b],
		and current_states[c]=valid_states[c] (c !=b)
		Create a permutation starting with b (and then the rest in descending order)
		Call place_ship
		Add the results to the grid

The only really "online" one here is the misses case.
The others are just efficient (hopefully).



IDEA:
instead of going through every valid configuration,
why don't we go through every invalid configuration (invalid WRT conflicts ONLY) -- there are probably far fewer of these!!
e.g. 3*10^10 valid configs on blank board
but 77414400000=7*10^10 configurations with conflicts as well
nevermind that's not true at all
77414400000-30093975536=47320424464


Why don't we try to count conflicts more efficiently?
What things are easy to superimpose on the grid?
The partial configurations with one ship

How do we solve this with two ships?
superimpose all configs (incl conflicts) onto grid
-- Do this by counting the states of each ship, and multiplying
   the super-imposed states of the other ship by that amount
subtract off the conflict squares
-- How do we find these?
   Iterate through the points for one ship, then iterate through the conflicting squares

How do we solve this for three ships?
Do the same thing again,
and do the last part for each pair
There's a problem though: We subtract too much
There are two cases:
-- configs where all 3 ships that pairwise overlapped
   In these, the entire state was subtracted 3 times (should only be one)
-- configs where all 3 ships sequentially overlapped
   In these, the middle ship state was subtracted 2 times (should only be one)

In general, for each conflicted configuration we find a graph of ships
with edges where they overlap.
There will be at least one edge in a conflicted configuration, so we want to decrement
the state counts of each involved state.
However, what if a node has degree > 1?






Create a graph of all states of ships.
Add edges to conflicting states.
This creates a multi-partite graph.
Also add edges within each part.
What do we want?
For each node, find the number of independent sets (of size 5) in which the node appears.

Can we compute this with a bitmask dp on the ships and independent set size (or is this what I'm doing already?)

What I'm doing right now:
Choose a vertex from part 1
Delete it and its neighbours
Choose a vertex from part 2
etc.
Add corresponding counts to vertices above

Equivalently:
Build the complement graph (multipartite)
Choose a vertex from part 1
Take the induced subgraph with it
Choose a vertex from part 2
Take the induced subgraph with it


Can we write an algorithm dependent on the hadwiger conjecture?
Hadwiger conjecture: A graph with no K_n minor has a colouring with <n colours
A graph has a clique of size n+1 only if it does not have a colouring with n colours
Is the converse true? No.
There are graphs with chromatic number n+1 but no clique of size n+1 of course (I think).
But these aren't ever going to be one of them.
For each node, count the number of cliques containing it.

Do a DP on ships and states storing number of colours needed
For each new state, look at every previous DP state (fast!)


For each pair of states on different ships, keep a counter on each edge from a to b:
The number of times state a uses state b in a configuration
There will be about 20000 of these edges.

If we later remove a state from usability,
all the things that relied on it should fail too.
Remove all counts of that state,
and for every adjacent state remove the counter on the edge.
The count of a state should equal the sum of its edge counts.

When we have a hit later,
we can look at which ship states are possible necessities for it
(not that many, <5*2*n).
Then, the new counts are produced by those of the edges of the subgraphs
generated by these nodes and their neighbours
(This sounds like hogwash).

Maybe, take the complement weights first:
For each edge with weight w and neighbours with weights a & b,
replace its weight with a+b-2w
(the number of configurations that have exactly one adjacent node).
In particular, a-w and b-w should be on opposing directed edges
(specifying which node).


How do we invalidate things:
In our pairwise usability graph, remove the invalid node.
Remove the edges adjacent to it,
and thus subtract values of those edges from the values of the nodes on the other side.
The residual graph represents exactly the configurations that did not use that node.
There's something wrong though.
Some of the residual edges depend on the deleted ones.

We need to keep track of another piece of info:
Which edges feed into which other edges,
and how much into each.


Bronâ€“Kerbosch algorithm finds all maximal cliques in an undirected graph.


Let's do something different:
Start with the grid.
For each tile, keep directed edges
"How many of the counts of this tile depend on this other tile"
Then, when a miss comes in,
subtract out that value
When a hit comes in the count to be equal to the edge to this tile.

online hit method from before:
upper bound of 18401280000 states!!!


Computation tree storage:
Store a node for each call of the recursive function,
with an edge from its parent node.
The node will have weight equal to its configuration count.
Leaf nodes all have weight 1.
A list/vector of all nodes representing a state is kept track of for each state.
When a state is invalidated, we remove its state nodes from the tree
and re-compute up to the root.
This will take a huge amount of memory on its own (10~100gb?)


2sat!:
This maximum-clique counting problem has a special property:
we want to choose exactly one vertex from each part of the multipartite graph.
How can we frame this?
n integer valued variables x_1,x_2,...,x_n representing the state of each ship (which vertex in each part)
constraints: ((x_1!=1)+(x_2!=1))((x_1!=1)+(x_2!=2))...
This is sortof like generalized 2-sat, with integer vals instead of booleans (not all integers, just finitely many)!
2-sat counting is still #P complete unfortunately, but maybe this still helps us do better
unfortunately this isn't as helpful as 2-sat,
because implications are not as simple
(otherwise we'd have a poly-time algorithm for an NP-complete problem (i think)!)


We finally get an ILP formulation! 0-1 ILP in-fact!
Create variables: s_{x_1=1},s_{x_1=2},...,s_{x_2=1},s_{x_2=2},...
(one for each ship state)
For each ship k, add restrictions
1=s_{x_k=1}+s_{x_k=2}+...+s_{x_k=|S_k|} (exactly one state chosen)
and for edges (x_j!=a)+(x_k!=b) add restrictions
1>=s_{x_j=a}+s_{x_k=b}
This is very similar to the SAT formulation from before.
Can we easily count solutions to this 0-1 ILP?
Observation: No non-trivial coefficients,
so we can very easily reduce to circuit-SAT

Question:
Is this ILP formulation TDI?
If so, we could equivalently count the number of vertices in the polytope
(which, regardless of usefulness, would be really cool).
